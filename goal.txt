system zero - a total dependently-typed functional programming language

bool : data.
true : bool.
false : bool.
if : bool -> forall (r : data) -> r -> r -> r.

bool = forall (r : data) -> r -> r -> r.
true r x _ = x.
false r _ y = y.
if b = b.

and : bool -> bool -> bool.
and x y = if x bool y false.

or : bool -> bool -> bool.
or x y = if x bool true y.

xor : bool -> bool -> bool.
xor x y = if x bool (not y) y.


-- normalize identity on int
(forall (a : data) -> (x : a) -> x) int 1

(forall (int : data) -> (x : int) -> x) 1
((x : int) -> x) 1

((1 : int) -> 1)
1

-- try again

-- the below types may be useful
forall a. a -> a.
exists b. b -> b.

forall a. free f a


list : (a : data) -> data.
nil : list a.
cons : a -> list a -> list a.

head : cons a (list a) -> a.
tail : cons a (list a) -> list a.

map : (a -> b) -> list a -> list b.
zip : (a -> b -> c) -> list a -> list b -> list c.
foldr : (a -> b -> b) -> b -> list a -> b.
foldl : (b -> a -> b) -> b -> list a -> b.

stream : (a : data) -> codata.
nil : stream a.
cons : a -> stream a -> stream a.
