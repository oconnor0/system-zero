use ast::{Const, Def, Expr, Mod, One, Var};

grammar;

// M = One+

pub Mod: Box<Mod<'input>> = {
  (<One>)+ => Box::new(Mod::new(<>))
};

// One is a single "line"/entry.
// O = Def
//   | Expr

pub One: Box<One<'input>> = {
  <Def> => Box::new(One::Def(<>)),
  <Expr> "." => Box::new(One::Expr(<>)),
};

// D = variable = E .
// T = variable : E .

pub Def: Box<Def<'input>> = {
  <v:Variable> "=" <e:Expr> "." => Box::new(Def::Val(v, e)),
  <v:Variable> ":" <t:Expr> "." => Box::new(Def::Ty(v, t)),
};

// E = constant
//   | variable
//   | E E
//   | forall (variable : E) -> E
//   | E -> E
//   | \(variable : E) -> E

pub Expr: Box<Expr<'input>> = {
  r"\\" "(" <v:Variable> ":" <t:Expr> ")" "->" <b:Expr> =>
    Box::new(Expr::Lam(v, t, b)),
  "forall" "(" <v:Variable> ":" <t:Expr> ")" "->" <b:Expr> =>
    Box::new(Expr::Pi(v, t, b)),
  <t:Apply> "->" <b:Expr> =>
    Box::new(Expr::Pi(Var::new("", 0), t, b)),
  Apply => <>,
};

Apply: Box<Expr<'input>> = {
  <f:Apply> <p:Term> => Box::new(Expr::App(f, p)),
  Term => <>,
};

Term: Box<Expr<'input>> = {
  "(" <Expr> ")" => <>,
  <Variable> => Box::new(Expr::Var(<>)),
  <Constant> => Box::new(Expr::Const(<>)),
};

Variable: Var<'input> = {
  <r"[a-zA-Z_]+[a-zA-Z_0-9]*"> => Var::new(<>, 0)
};

Constant: Const = {
  "data" => Const::Data,
  "codata" => Const::Codata,
};
