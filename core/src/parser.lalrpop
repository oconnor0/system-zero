// Copyright (c) 2016, Matthew O'Connor
use ast::{Const, Def, Expr, Mod, One, Var};

grammar;

// M = One+

pub Mod: Mod<'input> = {
  (<One>)+ => Mod::new(<>)
};

// One is a single "line"/entry.
// O = Def
//   | Expr

pub One: One<'input> = {
  <Def> => One::Def(<>),
  <Expr> "." => One::Expr(<>),
};

// D = variable = E .
// T = variable : E .

pub Def: Def<'input> = {
  <v:Variable> "=" <e:Expr> "." => Def::Val(v, e),
  <v:Variable> ":" <t:Expr> "." => Def::Ty(v, t),
};

// E = constant
//   | variable
//   | E E
//   | forall (variable : E) -> E
//   | E -> E
//   | \(variable : E) -> E

pub Expr: Expr<'input> = {
  r"\\" "(" <v:Variable> ":" <t:Expr> ")" "->" <b:Expr> =>
    Expr::Lam(v, Box::new(t), Box::new(b)),
  "forall" "(" <v:Variable> ":" <t:Expr> ")" "->" <b:Expr> =>
    Expr::Pi(v, Box::new(t), Box::new(b)),
  <t:Apply> "->" <b:Expr> =>
    Expr::Pi(Var::new("", 0), Box::new(t), Box::new(b)),
  Apply => <>,
};

Apply: Expr<'input> = {
  <f:Apply> <p:Term> => Expr::App(Box::new(f), Box::new(p)),
  Term => <>,
};

Term: Expr<'input> = {
  "(" <Expr> ")" => <>,
  <Variable> => Expr::Var(<>),
  <Constant> => Expr::Const(<>),
};

Variable: Var<'input> = {
  <r"[a-zA-Z_]+[a-zA-Z_0-9]*"> => Var::new(<>, 0)
};

Constant: Const = {
  "data" => Const::Data,
  "codata" => Const::Codata,
};
